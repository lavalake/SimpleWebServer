{{  This document represents parts of RFC 1945 that help create a minimal
    working web server fulfilling the HTTP/1.0 specification. Our comments are
    annottated in double curly braces.

    Assume that the header fits completely in 4096 bytes.  If it goes over this
    boundary, you are allowed to return an error response and close the connection.}}



{{  This defines the structure of every response.  Only some responses are
    important to our implementation of the Simple web server. }}

       Full-Response  = Status-Line              ; Section 6.1
                        *( General-Header        ; Section 4.3
                         | Response-Header       ; Section 6.2
                         | Entity-Header )       ; Section 7.1
                        CRLF
                        [ Entity-Body ]          ; Section 7.2

{{  There are a lot of pre-defined responses. You should minimally implement
    the following:

        200_OK -- send proper object data back
        404_NOT_FOUND -- when objects do not exist in the file system
        500_INTERNAL_SERVER_ERROR -- syscall failure right now/other failures
        501_NOT_IMPLEMENTED -- for any request you do not handle
        503_SERVICE_UNAVAILABLE -- if you can not accept anymore connections
}}

   The individual values of the numeric status codes defined for
   HTTP/1.0, and an example set of corresponding Reason-Phrase's, are
   presented below. The reason phrases listed here are only recommended
   -- they may be replaced by local equivalents without affecting the
   protocol. These codes are fully defined in Section 9.

       Status-Code    = "200"   ; OK
                      | "201"   ; Created
                      | "202"   ; Accepted
                      | "204"   ; No Content
                      | "301"   ; Moved Permanently
                      | "302"   ; Moved Temporarily
                      | "304"   ; Not Modified
                      | "400"   ; Bad Request
                      | "401"   ; Unauthorized
                      | "403"   ; Forbidden
                      | "404"   ; Not Found
                      | "500"   ; Internal Server Error
                      | "501"   ; Not Implemented
                      | "502"   ; Bad Gateway
                      | "503"   ; Service Unavailable
                      | extension-code

       extension-code = 3DIGIT

       Reason-Phrase  = *<TEXT, excluding CR, LF>

{{ From the list below, you are neede to implement only Server and
Content-Type. Add Connection: close to the responses. The value of Server header
should always be Simple/1.0. The value of the Content-Type header should be the
mime type of the requested file. }}

6.2  Response Header Fields

   The response header fields allow the server to pass additional
   information about the response which cannot be placed in the Status-
   Line. These header fields give information about the server and about
   further access to the resource identified by the Request-URI.

       Response-Header = Location                ; Section 10.11
                       | Server                  ; Section 10.14
                       | WWW-Authenticate        ; Section 10.16

7.1  Entity Header Fields

   Entity-Header fields define optional metainformation about the
   Entity-Body or, if no body is present, about the resource identified
   by the request.

       Entity-Header  = Allow                    ; Section 10.1
                      | Content-Encoding         ; Section 10.3
                      | Content-Length           ; Section 10.4
                      | Content-Type             ; Section 10.5
                      | Expires                  ; Section 10.7
                      | Last-Modified            ; Section 10.10
                      | extension-header

       extension-header = HTTP-header


{{  For GETs try to load and send files from the directory rooted at the www
    folder as specified on the command line to Simple.  If the request
    is for a folder itself, or '/' the root, try to open an 'index.html' file
    and if it exists return its contents as an entity-body in a valid response.
}}

8.1  GET

   The GET method means retrieve whatever information (in the form of an
   entity) is identified by the Request-URI. If the Request-URI refers
   to a data-producing process, it is the produced data which shall be
   returned as the entity in the response and not the source text of the
   process, unless that text happens to be the output of the process.

{{  You can ignore conditionals and partials for Simple }}

   The semantics of the GET method changes to a "conditional GET" if the
   request message includes an If-Modified-Since header field. A
   conditional GET method requests that the identified resource be
   transferred only if it has been modified since the date given by the
   If-Modified-Since header, as described in Section 10.9. The
   conditional GET method is intended to reduce network usage by
   allowing cached entities to be refreshed without requiring multiple
   requests or transferring unnecessary data.

{{  Basically, return all the headers of a GET without actually sending the
    entity-body or bytes from the requested object.  You may want to implement
    this method first as it is the simplest. }}

8.2  HEAD

   The HEAD method is identical to GET except that the server must not
   return any Entity-Body in the response. The metainformation contained
   in the HTTP headers in response to a HEAD request should be identical
   to the information sent in response to a GET request. This method can
   be used for obtaining metainformation about the resource identified
   by the Request-URI without transferring the Entity-Body itself. This
   method is often used for testing hypertext links for validity,
   accessibility, and recent modification.

   There is no "conditional HEAD" request analogous to the conditional
   GET. If an If-Modified-Since header field is included with a HEAD
   request, it should be ignored.

9.2  Successful 2xx

   This class of status code indicates that the client's request was
   successfully received, understood, and accepted.

   200 OK

   The request has succeeded. The information returned with the
   response is dependent on the method used in the request, as follows:

   GET    an entity corresponding to the requested resource is sent
          in the response;

   HEAD   the response must only contain the header information and
          no Entity-Body;

   POST   an entity describing or containing the result of the action.

9.4  Client Error 4xx

   The 4xx class of status code is intended for cases in which the
   client seems to have erred. If the client has not completed the
   request when a 4xx code is received, it should immediately cease
   sending data to the server. Except when responding to a HEAD request,
   the server should include an entity containing an explanation of the
   error situation, and whether it is a temporary or permanent
   condition. These status codes are applicable to any request method.

      Note: If the client is sending data, server implementations on TCP
      should be careful to ensure that the client acknowledges receipt
      of the packet(s) containing the response prior to closing the
      input connection. If the client continues sending data to the
      server after the close, the server's controller will send a reset
      packet to the client, which may erase the client's unacknowledged
      input buffers before they can be read and interpreted by the HTTP
      application.

{{ Use this is the file exists but you are not able to open it }}

   403 Forbidden

   The server understood the request, but is refusing to fulfill it.
   Authorization will not help and the request should not be repeated.
   If the request method was not HEAD and the server wishes to make
   public why the request has not been fulfilled, it should describe
   the reason for the refusal in the entity body. This status code is
   commonly used when the server does not wish to reveal exactly why
   the request has been refused, or when no other response is
   applicable.


{{ Use this is the file requested by GET or HEAD does not exist }}

   404 Not Found

   The server has not found anything matching the Request-URI. No
   indication is given of whether the condition is temporary or
   permanent. If the server does not wish to make this information
   available to the client, the status code 403 (forbidden) can be
   used instead.

9.5  Server Error 5xx

   Response status codes beginning with the digit "5" indicate cases in
   which the server is aware that it has erred or is incapable of
   performing the request. If the client has not completed the request
   when a 5xx code is received, it should immediately cease sending data
   to the server. Except when responding to a HEAD request, the server
   should include an entity containing an explanation of the error
   situation, and whether it is a temporary or permanent condition.
   These response codes are applicable to any request method and there
   are no required header fields.

{{  Use this to signal some system call error.  You may want to also send
    Connection: close, and close the socket after sending that response. }}

   500 Internal Server Error

   The server encountered an unexpected condition which prevented it
   from fulfilling the request.

{{  Use this to signal all HTTP/1.0 requests you have _not_ implemented.
    In case of Simple, every request except GET and HEAD should get this
    repsonse }}

   501 Not Implemented

   The server does not support the functionality required to fulfill
   the request. This is the appropriate response when the server does
   not recognize the request method and is not capable of supporting
   it for any resource.
